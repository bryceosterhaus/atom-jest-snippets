'.source.js, .source.jsx, .source.ts, .source.js-semantic':

  'expect(value)':
    description: 'expect(value)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#expectvalue'
    prefix: 'exp'
    body: 'expect($1)$2{{expressionTerminator}}'

  '.toBe(value)':
    description: 'expect(value).toBe(value)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobevalue'
    prefix: 'ebe'
    body: 'expect($1).toBe($2){{expressionTerminator}}'

  '.toHaveBeenCalled()':
    description: 'expect(mockFn).toHaveBeenCalled()'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tohavebeencalled'
    prefix: 'ecall'
    body: 'expect($1).toHaveBeenCalled(){{expressionTerminator}}'

  '.toHaveBeenCalledTimes(number)':
    description: 'expect(mockFn).toHaveBeenCalledTimes(number)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tohavebeencalledtimesnumber'
    prefix: 'ecallt'
    body: 'expect($1).toHaveBeenCalledTimes($2){{expressionTerminator}}'

  '.toHaveBeenCalledWith(values)':
    description: 'expect(mockFn).toHaveBeenCalledWith(arg1, arg2, ...)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tohavebeencalledwitharg1-arg2-'
    prefix: 'ecallw'
    body: 'expect($1).toHaveBeenCalledWith($2){{expressionTerminator}}'

  '.toBeCloseTo(number, number)':
    description: 'expect(number).toBeCloseTo(number, numDigits)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobeclosetonumber-numdigits'
    prefix: 'ecloseto'
    body: 'expect($1).toBeCloseTo($2, $3){{expressionTerminator}}'

  '.toBeDefined()':
    description: 'expect(value).toBeDefined()'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobedefined'
    prefix: 'edef'
    body: 'expect($1).toBeDefined(){{expressionTerminator}}'

  '.toBeFalsy()':
    description: 'expect(value).toBeFalsy()'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobefalsy'
    prefix: 'efalsy'
    body: 'expect($1).toBeFalsy(){{expressionTerminator}}'

  '.toBeGreaterThan(number)':
    description: 'expect(number).toBeGreaterThan(number)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobegreaterthannumber'
    prefix: 'egreater'
    body: 'expect($1).toBeGreaterThan($2){{expressionTerminator}}'

  '.toBeGreaterThanOrEqual(number)':
    description: 'expect(number).toBeGreaterThanOrEqual(number)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobelessthanorequalnumber'
    prefix: 'egreateror'
    body: 'expect($1).toBeGreaterThanOrEqual($2){{expressionTerminator}}'

  '.toBeLessThan(number)':
    description: 'expect(number).toBeLessThan(number)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobelessthannumber'
    prefix: 'eless'
    body: 'expect($1).toBeLessThan($2){{expressionTerminator}}'

  '.toBeLessThanOrEqual(number)':
    description: 'expect(number).toBeLessThanOrEqual(number)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobelessthanorequalnumber'
    prefix: 'elessor'
    body: 'expect($1).toBeLessThanOrEqual($2){{expressionTerminator}}'

  '.toBeInstanceOf(Class)':
    description: 'expect(obj).toBeInstanceOf(Class)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobeinstanceofclass'
    prefix: 'einst'
    body: 'expect($1).toBeInstanceOf($2){{expressionTerminator}}'

  '.toBeNull()':
    description: 'expect(value).toBeNull()'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobenull'
    prefix: 'enull'
    body: 'expect($1).toBeNull(){{expressionTerminator}}'

  '.toBeTruthy()':
    description: 'expect(value).toBeTruthy()'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobetruthy'
    prefix: 'etruthy'
    body: 'expect($1).toBeTruthy(){{expressionTerminator}}'

  '.toBeUndefined()':
    description: 'expect(value).toBeUndefined()'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tobeundefined'
    prefix: 'eundef'
    body: 'expect($1).toBeUndefined(){{expressionTerminator}}'

  '.toContain(value)':
    description: 'expect(list).toContain(value)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tocontainitem'
    prefix: 'econ'
    body: 'expect($1).toContain($2){{expressionTerminator}}'

  '.toContainEqual(value)':
    description: 'expect(list).toContainEqual(value)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tocontainequalitem'
    prefix: 'econeq'
    body: 'expect($1).toContainEqual($2){{expressionTerminator}}'

  '.toEqual(value)':
    description: 'expect(value).toEqual(value)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#toequalvalue'
    prefix: 'eeq'
    body: 'expect($1).toEqual($2){{expressionTerminator}}'

  '.toHaveLength(number)':
    description: 'expect(list).toHaveLength(number)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tohavelengthnumber'
    prefix: 'eleng'
    body: 'expect($1).toHaveLength($2){{expressionTerminator}}'

  '.toMatch(regexpOrString)':
    description: 'expect(string).toMatch(regexpOrString)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tomatchregexporstring'
    prefix: 'emat'
    body: 'expect($1).toMatch($2){{expressionTerminator}}'

  '.toMatchObject(obj)':
    description: 'expect(obj).toMatchObject(obj)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tomatchobjectobject'
    prefix: 'ematob'
    body: 'expect($1).toMatchObject($2){{expressionTerminator}}'

  '.toMatchSnapshot(optionalString)':
    description: 'expect(value).toMatchSnapshot(optionalString)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tomatchsnapshotoptionalstring'
    prefix: 'ematsnap'
    body: 'expect($1).toMatchSnapshot($2){{expressionTerminator}}'

  '.toThrow(error)':
    description: 'expect(func).toThrow(error)'
    descriptionMoreURL: 'http://facebook.github.io/jest/docs/expect.html#tothrowerror'
    prefix: 'ethrow'
    body: 'expect($1).toThrow($2){{expressionTerminator}}'